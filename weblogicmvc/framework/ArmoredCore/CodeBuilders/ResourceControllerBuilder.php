<?php
namespace ArmoredCore\CodeBuilders;

use Nette\PhpGenerator\PhpNamespace;
use Symfony\Component\String\Inflector\EnglishInflector;
use function Symfony\Component\String\u;

class ResourceControllerBuilder
{
    private $serverModuleName;
    private $namespaceServerModuleName;
    private $modelClassName;
    private $modelVariableName;
    private $modelVariableNamePlural;

    public function __construct($serverModuleName, $modelName)
    {
        $this->serverModuleName = $serverModuleName;
        $this->modelClassName = $modelName;
        $this->modelVariableName = strtolower($modelName);
        $inflector = new EnglishInflector();
        $this->modelVariableNamePlural = $inflector->pluralize($this->modelVariableName);
        $this->namespaceServerModuleName = u($this->serverModuleName)->title();

    }

    public function buildClass(){

        //$namespace = new PhpNamespace($this->namespaceServerModuleName . '\Controller');
        $namespace = new PhpNamespace('');
        $namespace->addUse('ArmoredCore\Controllers\BaseController');
        $namespace->addUse('ArmoredCore\WebObjects\Post');
        $namespace->addUse('ArmoredCore\WebObjects\Redirect');
        $namespace->addUse('ArmoredCore\WebObjects\View');
        $namespace->addUse('ArmoredCore\Interfaces\ResourceControllerInterface');


        $class = $namespace->addClass($this->modelClassName . 'Controller');
        $class->setExtends('ArmoredCore\Controllers\BaseController')
            ->addImplement('ArmoredCore\Interfaces\ResourceControllerInterface')
            ->addComment('CRUD Resource Controller for ActiveRecord Model ' . $this->modelClassName)
            ->addComment(' ')
            ->addComment('Code generated by WebLogicMVC Code Builder')
            ->addComment(' ')
            ->addComment('Date: ' . date('Y-m-d'))
            ->addComment(' ')
            ->addComment('WL Code Builder developed by SÃ­lvio Priem Mendes')
            ->addComment('*');

        // Method index
        $class->addMethod('index')
            ->addComment('Returns index view with all records')
            ->addBody('$' . $this->modelVariableNamePlural[0] . ' = ' . $this->modelClassName . '::all();')
            ->addBody('return View::make(\'' . $this->modelVariableName . '.index\', [\'' . $this->modelVariableNamePlural[0] . '\' => $' . $this->modelVariableNamePlural[0] . ']);');

        // Method create
        $class->addMethod('create')
            ->addComment('Returns a view with a form to create a new record')
            ->addBody('return View::make(\'' . $this->modelVariableName . '.create\'' . ');');

        // Method store
        $class->addMethod('store')
            ->addComment('Receives new record data through POST method and stores it in the DB table')
            ->addBody('//create new resource (activerecord/model) instance with data from POST')
            ->addBody('//your form name fields must match the ones of the table fields')
            ->addBody('$' . $this->modelVariableName . ' = new ' . $this->modelClassName . '(Post::getAll());')
            ->addBody('')
            ->addBody('if($' . $this->modelVariableName . '->is_valid()){')
            ->addBody('    $' . $this->modelVariableName . '->save();')
            ->addBody('    Redirect::toRoute(\''  . $this->modelVariableName . '/index\');')
            ->addBody('} else {')
            ->addBody('    //redirect to form with data and errors')
            ->addBody('    Redirect::flashToRoute(\'' . $this->modelVariableName . '/create\', [\'' . $this->modelVariableName . '\' => $' . $this->modelVariableName . ']);')
            ->addBody('}');

        // Method show
        $method = $class->addMethod('show')
            ->addComment('return a detailed view with record where PK = $id')
            ->addBody('$' .$this->modelVariableName .' = ' . $this->modelClassName . '::find([$id]);')
            ->addBody('')
            ->addBody('if (is_null($?)) {' , [$this->modelVariableName] )
            ->addBody('   //TODO redirect to standard error page')
            ->addBody('} else {')
            ->addBody('    return View::make(\'' . $this->modelVariableName . '.show\', [? => $?]);', [$this->modelVariableName,$this->modelVariableName])
            ->addBody('}');
        $method->addParameter('id');

        // Method edit
        $method = $class->addMethod('edit')
            ->addComment('return a editable form view with record where PK = $id')
            ->addBody('$' .$this->modelVariableName .' = ' . $this->modelClassName . '::find([$id]);')
            ->addBody('')
            ->addBody('if (is_null($?)) {' , [$this->modelVariableName] )
            ->addBody('   //TODO redirect to standard error page')
            ->addBody('} else {')
            ->addBody('    return View::make(\'' . $this->modelVariableName . '.edit\', [? => $?]);', [$this->modelVariableName,$this->modelVariableName])
            ->addBody('}');
        $method->addParameter('id');

        // Method update
        $method = $class->addMethod('update')
            ->addComment('Receives record data through POST method and updates it in the DB table')
            ->addBody('//find resource (activerecord/model) instance where PK = $id')
            ->addBody('//your form name fields must match the ones of the table fields')
            ->addBody('$' .$this->modelVariableName .' = ' . $this->modelClassName . '::find([$id]);')
            ->addBody('$?->update_attributes(Post::getAll());', [$this->modelVariableName])
            ->addBody('')
            ->addBody('if($' . $this->modelVariableName . '->is_valid()){')
            ->addBody('    $' . $this->modelVariableName . '->save();')
            ->addBody('    Redirect::toRoute(\''  . $this->modelVariableName . '/index\');')
            ->addBody('} else {')
            ->addBody('    //redirect to form with data and errors')
            ->addBody('    Redirect::flashToRoute(\'' . $this->modelVariableName . '/edit\', [\'' . $this->modelVariableName . '\' => $' . $this->modelVariableName . ']);')
            ->addBody('}');
        $method->addParameter('id');

        // Method destroy
        $method = $class->addMethod('destroy')
            ->addComment('deletes the record where PK = $id')
            ->addBody('$? = ' . $this->modelVariableName . '::find([$id]);', [$this->modelVariableName])
            ->addBody('$?->delete();', [$this->modelVariableName])
            ->addBody('Redirect::toRoute(\''  . $this->modelVariableName . '/index\');');
        $method->addParameter('id');

        return $namespace;

    }


}